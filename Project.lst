Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/05/20 11:29:36
<Project 6 - String Primitives and Macros     (Proj6_JANT.as  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_JANT.asm)

				; Author: Timothy Jan
				; Last Modified: 12/03/2020
				; OSU email address:JANT@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: 6                 Due Date: 12/06/2020
				; Description: Uses macros and string processing to ask the user for ten (valid) numbers, reports the list of numbers entered, and shows the sum and rounded average. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Reads a string input from the user
				;
				; Preconditions: Uses parameters passed onto parameter stack. 
				;
				; Receives:
				; inputMessage = string address 
				;	- prompts the user for their number input
				; outputString = string address
				;	- temporary buffer to store user's input; used by procedure to validate user's entry
				; maxStringLength = constant
				; userStringLength = variable address
				;
				; returns: 
				; outputString = user generated string
				; userStringLength = user generated string length
				; ---------------------------------------------------------------------------------

				mGetString MACRO inputMessage, outputString, maxStringLength, userStringLength

					PUSH	EAX
					MOV		EDX, inputMessage
					CALL	WriteString

					MOV		EDX, outputString
					MOV		ECX, maxStringLength
					CALL	ReadString
					
					MOV		userStringLength, EAX
					POP		EAX
					
					CALL	CrLf

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a given string stored in a given memory location
				;
				; Preconditions: String by reference
				;
				; Receives:
				; displayInput = string address
				;
				; returns: None
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO displayInput
					PUSH	EDX

					MOV		EDX, displayInput
					CALL	WriteString

					POP		EDX

				ENDM

					; constants
 = 0000002D				MAXLENGTH = 45

 00000000			.data

					; messages
 00000000 50 72 6F 6A 65		programTitle			BYTE	"Project 6: Using string primitives and macros to process numbers",0
	   63 74 20 36 3A
	   20 55 73 69 6E
	   67 20 73 74 72
	   69 6E 67 20 70
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 6D
	   61 63 72 6F 73
	   20 74 6F 20 70
	   72 6F 63 65 73
	   73 20 6E 75 6D
	   62 65 72 73 00
 00000041 50 72 6F 67 72		programBy				BYTE	"Programmer: Timothy Jan",0
	   61 6D 6D 65 72
	   3A 20 54 69 6D
	   6F 74 68 79 20
	   4A 61 6E 00
 00000059 50 6C 65 61 73		programInstructions1	BYTE	"Please enter 10 signed decimal integers.",0 
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   00
 00000082 45 61 63 68 20		programInstructions2	BYTE	"Each decimal must fit inside a signed 32 bit register [-2,147,483,648 ... 2,147,483,647].",13,10,"After you're done, I'll display a list of the numbers you entered, their sum, and the average value.",0
	   64 65 63 69 6D
	   61 6C 20 6D 75
	   73 74 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 73 69 67 6E
	   65 64 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 20 5B
	   2D 32 2C 31 34
	   37 2C 34 38 33
	   2C 36 34 38 20
	   2E 2E 2E 20 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 37 5D 2E 0D
	   0A 41 66 74 65
	   72 20 79 6F 75
	   27 72 65 20 64
	   6F 6E 65 2C 20
	   49 27 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   79 6F 75 20 65
	   6E 74 65 72 65
	   64 2C 20 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 00
 00000142 50 6C 65 61 73		messageInput			BYTE	"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000162 45 52 52 4F 52		messageError			BYTE	"ERROR: You didn't enter a valid signed integer or the integer you entered was too big. Please try again!",0
	   3A 20 59 6F 75
	   20 64 69 64 6E
	   27 74 20 65 6E
	   74 65 72 20 61
	   20 76 61 6C 69
	   64 20 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 20 6F 72 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 20 79 6F 75
	   20 65 6E 74 65
	   72 65 64 20 77
	   61 73 20 74 6F
	   6F 20 62 69 67
	   2E 20 50 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 21 00
 000001CB 59 6F 75 20 65		messageIntegers			BYTE	"You entered the following integers:",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 69 6E 74 65
	   67 65 72 73 3A
	   00
 000001EF 54 68 65 20 73		messageSum				BYTE	"The sum of the integers you entered is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 20 79
	   6F 75 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 00000218 54 68 65 20 72		messageAverage			BYTE	"The rounded average of the integers you entered is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   3A 20 00
 0000024D 20 00				messageSpace			BYTE	" ",0
 0000024F 2C 00				messageComma			BYTE	",",0
 00000251 54 68 61 6E 6B		goodbye					BYTE	"Thank you for helping test my Project 6!", 0
	   20 79 6F 75 20
	   66 6F 72 20 68
	   65 6C 70 69 6E
	   67 20 74 65 73
	   74 20 6D 79 20
	   50 72 6F 6A 65
	   63 74 20 36 21
	   00

					; variables
 0000027A  0000002D [			userInputTemp			BYTE    45 DUP(?)		; store strings
	    00
	   ]
 000002A7 00000000			userInputTempLength		DWORD	?				; store string length
 000002AB 00000000			userVal					SDWORD	?
 000002AF  0000000C [			printTemp				BYTE	12 DUP(?)
	    00
	   ]
 000002BB 00000000			userNumSum				SDWORD	?
 000002BF 00000000			userNumAverage			SDWORD	?

					; arrays
 000002C3  0000000A [			userNumArray			SDWORD	10 DUP(?)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
					
				; INTRODUCTION
 00000000  68 00000082 R		PUSH	OFFSET programInstructions2
 00000005  68 00000059 R		PUSH	OFFSET programInstructions1
 0000000A  68 00000041 R		PUSH	OFFSET programBy
 0000000F  68 00000000 R		PUSH	OFFSET programTitle
 00000014  E8 0000012A			CALL	introduction

				; GET NUMBERS FROM USER

					; initialize loop to get user input and store address of userNumArray in EDI
 00000019  B9 0000000A			MOV		ECX, 10
 0000001E  BF 000002C3 R		MOV		EDI, OFFSET userNumArray
						
					; get 10 valid integers from the user
 00000023				_inputLoop:
 00000023  57				PUSH	EDI
 00000024  68 000002AB R		PUSH	OFFSET userVal
 00000029  68 000002C3 R		PUSH	OFFSET userNumArray
 0000002E  6A 2D			PUSH	MAXLENGTH
 00000030  68 000002A7 R		PUSH	OFFSET userInputTempLength
 00000035  68 0000027A R		PUSH	OFFSET userInputTemp
 0000003A  68 00000162 R		PUSH	OFFSET messageError
 0000003F  68 00000142 R		PUSH	OFFSET messageInput
 00000044  E8 00000147			CALL	ReadVal

					; store valid integers in userNumArray	
 00000049  5F				POP		EDI
 0000004A  8B 1D 000002AB R		MOV		EBX, userVal
 00000050  89 1F			MOV		[EDI], EBX
 00000052  83 C7 04			ADD		EDI, 4

 00000055  E2 CC			LOOP	_inputLoop

				; DISPLAY USER'S INTEGERS

					; title message
					mDisplayString OFFSET messageIntegers
 00000057  52		     1		PUSH	EDX
 00000058  BA 000001CB R     1		MOV		EDX, OFFSET messageIntegers
 0000005D  E8 00000000 E     1		CALL	WriteString
 00000062  5A		     1		POP		EDX
 00000063  E8 00000000 E		CALL	CrLf

					; initialize display counter and move address of userNumArray in EDI
 00000068  B9 00000009			MOV		ECX, 9
 0000006D  BE 000002C3 R		MOV		ESI, OFFSET userNumArray

 00000072				_displayLoop:
 00000072  68 000002AF R		PUSH	OFFSET printTemp
 00000077  56				PUSH	ESI
 00000078  E8 000001A8			CALL	WriteVal

					; print comma after first 9 numbers
					mDisplayString OFFSET messageComma
 0000007D  52		     1		PUSH	EDX
 0000007E  BA 0000024F R     1		MOV		EDX, OFFSET messageComma
 00000083  E8 00000000 E     1		CALL	WriteString
 00000088  5A		     1		POP		EDX
					; print blank space between numbers
					mDisplayString OFFSET messageSpace
 00000089  52		     1		PUSH	EDX
 0000008A  BA 0000024D R     1		MOV		EDX, OFFSET messageSpace
 0000008F  E8 00000000 E     1		CALL	WriteString
 00000094  5A		     1		POP		EDX
					
 00000095  83 C6 04			ADD		ESI, 4
 00000098  E2 D8			LOOP	_displayLoop

					; one last print for term without commma
 0000009A  68 000002AF R		PUSH	OFFSET printTemp
 0000009F  56				PUSH	ESI
 000000A0  E8 00000180			CALL	WriteVal

					; print blank space between numbers
					mDisplayString OFFSET messageSpace
 000000A5  52		     1		PUSH	EDX
 000000A6  BA 0000024D R     1		MOV		EDX, OFFSET messageSpace
 000000AB  E8 00000000 E     1		CALL	WriteString
 000000B0  5A		     1		POP		EDX

 000000B1  E8 00000000 E		CALL	CrLf
 000000B6  E8 00000000 E		CALL	CrLf

				; CALCULATE AND DISPLAY SUM
					
 000000BB  33 C0			XOR		EAX, EAX
 000000BD  33 F6			XOR		ESI, ESI
 000000BF  33 C9			XOR		ECX, ECX

 000000C1  BE 000002C3 R		MOV		ESI, OFFSET userNumArray
 000000C6  B9 0000000A			MOV		ECX, 10

 000000CB				_sumLoop:
 000000CB  03 06			ADD		EAX, [ESI]
 000000CD  83 C6 04			ADD		ESI, 4
 000000D0  E2 F9			LOOP	_sumLoop

 000000D2  A3 000002BB R		MOV		userNumSum, EAX

					mDisplayString OFFSET messageSum
 000000D7  52		     1		PUSH	EDX
 000000D8  BA 000001EF R     1		MOV		EDX, OFFSET messageSum
 000000DD  E8 00000000 E     1		CALL	WriteString
 000000E2  5A		     1		POP		EDX

 000000E3  68 000002AF R		PUSH	OFFSET printTemp
 000000E8  68 000002BB R		PUSH	OFFSET userNumSum
 000000ED  E8 00000133			CALL	WriteVal

 000000F2  E8 00000000 E		CALL	CrLf
 000000F7  E8 00000000 E		CALL	CrLf

				; CALCULATE AND DISPLAY AVERAGE

 000000FC  A1 000002BB R		MOV		EAX, userNumSum

 00000101  99				CDQ	
 00000102  BB 0000000A			MOV		EBX, 10
 00000107  F7 FB			IDIV	EBX

 00000109  83 FA 05			CMP		EDX, 5				
 0000010C  7C 01			JL		_noRound				; since the divisor will always be 10, if the remainder is less than 5 we don't round. otherwise, round up 
 0000010E  40				INC		EAX

 0000010F				_noRound:
 0000010F  A3 000002BF R		MOV		userNumAverage, EAX

					mDisplayString OFFSET messageAverage
 00000114  52		     1		PUSH	EDX
 00000115  BA 00000218 R     1		MOV		EDX, OFFSET messageAverage
 0000011A  E8 00000000 E     1		CALL	WriteString
 0000011F  5A		     1		POP		EDX

 00000120  68 000002AF R		PUSH	OFFSET printTemp
 00000125  68 000002BF R		PUSH	OFFSET userNumAverage
 0000012A  E8 000000F6			CALL	WriteVal

 0000012F  E8 00000000 E		CALL	CrLf
 00000134  E8 00000000 E		CALL	CrLf

				; BYE BYE

 00000139  68 00000251 R		PUSH	OFFSET goodbye
 0000013E  E8 00000199			CALL	farewell

 00000143			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Description: Displays program title, programmer name, and two sets of instructions. 
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: Addresses for title, programmer name, and two user instructions.
				;
				; Returns: None
				; ---------------------------------------------------------------------------------

 00000143			introduction PROC

 00000143  55				PUSH	EBP
 00000144  8B EC			MOV		EBP, ESP

					mDisplayString [EBP + 8]			; title
 00000146  52		     1		PUSH	EDX
 00000147  8B 55 08	     1		MOV		EDX, [EBP + 8]
 0000014A  E8 00000000 E     1		CALL	WriteString
 0000014F  5A		     1		POP		EDX
 00000150  E8 00000000 E		CALL	CrLf	
					mDisplayString [EBP + 12]			; programmer
 00000155  52		     1		PUSH	EDX
 00000156  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000159  E8 00000000 E     1		CALL	WriteString
 0000015E  5A		     1		POP		EDX
 0000015F  E8 00000000 E		CALL	CrLf
 00000164  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP + 16]			; first instructions
 00000169  52		     1		PUSH	EDX
 0000016A  8B 55 10	     1		MOV		EDX, [EBP + 16]
 0000016D  E8 00000000 E     1		CALL	WriteString
 00000172  5A		     1		POP		EDX
 00000173  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP + 20]			; second instruction
 00000178  52		     1		PUSH	EDX
 00000179  8B 55 14	     1		MOV		EDX, [EBP + 20]
 0000017C  E8 00000000 E     1		CALL	WriteString
 00000181  5A		     1		POP		EDX
 00000182  E8 00000000 E		CALL	CrLf
 00000187  E8 00000000 E		CALL	CrLf

 0000018C  5D				POP		EBP
 0000018D  C2 0014			RET		20

 00000190			introduction ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Description: Invokes mGetString to receive user input, converts ascii digits to SDWORD, validates user input, and if valid, stores in userNumArray.
				;			   Returns error message and reprompts if user enters an invalid number.
				;
				; Preconditions: Procedure must have addressses for input message, message error, user temporary input array, user temporary input length, max length constant,
				;				 user value array, and user value pushed in that order. 
				;
				; Postconditions: Overwrites userVal each time a valid number is called - make sure you store it outside the function call if you want to save it.
				;
				; Receives: 
				;	userVal variable (address)
				;	userNumArray (address)
				;	MAXLENGTH (constant)
				;	userInputTempLength variable (address)
				;	userInputTemp variable (address)
				;	messageError string (address)
				;	messageInput (address)
				;
				; Returns: Validated user entry stored in userVal 
				; ---------------------------------------------------------------------------------

 00000190			ReadVal PROC

 00000190  55				PUSH	EBP
 00000191  8B EC			MOV		EBP, ESP
 00000193  51				PUSH	ECX

 00000194				_input:
					;inputMessage, outputString, maxStringLength, userStringLength
					mGetString [EBP + 8], [EBP + 16], [EBP + 24], [EBP + 20]
 00000194  50		     1		PUSH	EAX
 00000195  8B 55 08	     1		MOV		EDX, [EBP + 8]
 00000198  E8 00000000 E     1		CALL	WriteString
 0000019D  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000001A0  8B 4D 18	     1		MOV		ECX, [EBP + 24]
 000001A3  E8 00000000 E     1		CALL	ReadString
 000001A8  89 45 14	     1		MOV		[EBP + 20], EAX
 000001AB  58		     1		POP		EAX
 000001AC  E8 00000000 E     1		CALL	CrLf
					
					; string characters are stored in userInputTemp (ebp + 16) and string length is stored in userStringLength (ebp + 20)

 000001B1  8B 4D 14			MOV		ECX, [EBP + 20]				; string length
 000001B4  8B 75 10			MOV		ESI, [EBP + 16]				; user's entry
 000001B7  8B 7D 20			MOV		EDI, [EBP + 32]				; user end value

 000001BA  33 C0			XOR		EAX, EAX
 000001BC  33 DB			XOR		EBX, EBX

 000001BE				_posConvertLoop:
 000001BE  FC				CLD
 000001BF  AC				LODSB
 000001C0  3C 2D			CMP		AL, 45
 000001C2  74 40			JE		_negConvert					; converts negative string
 000001C4  3C 2B			CMP		AL, 43						; else, checks if necessary to skip plus sign and continues with normal converting
 000001C6  74 35			JE		_plusSign
 000001C8  3C 30			CMP		AL, 48						; below 0
 000001CA  7C 1B			JL		_errorEntry
 000001CC  3C 39			CMP		AL, 57						; above 9
 000001CE  7F 17			JG		_errorEntry	

 000001D0  2C 30			SUB		AL, 48
 000001D2  6B DB 0A			IMUL	EBX, 10
 000001D5  70 10			JO		_errorEntry					; jumps to entry error if multiplication results in an overflow
 000001D7  03 D8			ADD		EBX, EAX
					
 000001D9  E2 E3			LOOP _posConvertLoop
					
 000001DB				_numStore:
					; store final number in userNumArray
 000001DB  57				PUSH	EDI
 000001DC  8B 7D 20			MOV		EDI, [EBP + 32]				; userVal
 000001DF  89 1F			MOV		[EDI], EBX
 000001E1  5F				POP		EDI

 000001E2  59				POP		ECX
 000001E3  5D				POP		EBP
 000001E4  C2 001C			RET		28

 000001E7				_errorEntry:
					mDisplayString [EBP + 12]
 000001E7  52		     1		PUSH	EDX
 000001E8  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000001EB  E8 00000000 E     1		CALL	WriteString
 000001F0  5A		     1		POP		EDX
 000001F1  E8 00000000 E		CALL	CrLf
 000001F6  E8 00000000 E		CALL	CrLf
 000001FB  EB 97			JMP		_input

 000001FD				_plusSign:
					; only allows a plus sign to be entered as the first character (counter == string length) 
 000001FD  3B 4D 14			CMP		ECX, [EBP + 20]
 00000200  75 E5			JNE		_errorEntry
 00000202  E2 BA			LOOP	_posConvertLoop

 00000204				_negConvert:
					; only allows minus sign to be entered as the first character
 00000204  3B 4D 14			CMP		ECX, [EBP + 20]
 00000207  75 DE			JNE		_errorEntry
 00000209  49				DEC		ECX
					
 0000020A				_negConvertLoop:
 0000020A  AC				LODSB

 0000020B  3C 30			CMP		AL, 48						; below 0
 0000020D  7C D8			JL		_errorEntry
 0000020F  3C 39			CMP		AL, 57						; above 9
 00000211  7F D4			JG		_errorEntry	

 00000213  2C 30			SUB		AL, 48
 00000215  6B DB 0A			IMUL	EBX, 10
 00000218  70 CD			JO		_errorEntry
 0000021A  2B D8			SUB		EBX, EAX

 0000021C  E2 EC			LOOP	_negConvertLoop
 0000021E  EB BB			JMP		_numStore

 00000220  59				POP		ECX
 00000221  5D				POP		EBP
 00000222  C2 001C			RET		28

 00000225			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Description: Converts a numeric value to ascii digits and calls mDisplayString to print the ascii representation of the numeric value. 
				;
				; Preconditions: Must be passed a numeric value (no passing strings!)
				;
				; Postconditions: Doesn't save the converted numeric value - each time WriteVal is called it overwrites the temporary print buffer with the next value
				;
				; Receives: 
				;	printTemp address (buffer to store converted string)
				;	ESI (user value into Writeval)
				;
				; Returns: None
				; ---------------------------------------------------------------------------------

 00000225			WriteVal PROC
					
 00000225  55				PUSH	EBP
 00000226  8B EC			MOV		EBP, ESP
					
					; get the integer			; NEGATIVE USE SIGN FLAG??? 
 00000228  8B 75 08			MOV		ESI, [EBP + 8]      ; integer value in
 0000022B  8B 7D 0C			MOV		EDI, [EBP + 12]		; string out

					; move initial value into EAX
 0000022E  8B 06			MOV		EAX, [ESI] 

					; check if integer is negative
 00000230  83 F8 00			CMP		EAX, 0
 00000233  7D 14			JGE		_integerToASCII		; if positive, skip negative sign and convert normally

 00000235  99				CDQ	

 00000236  BB FFFFFFFF			MOV		EBX, -1				; make positive
 0000023B  F7 FB			IDIV	EBX

 0000023D  50				PUSH	EAX
 0000023E  B8 0000002D			MOV		EAX, 45
 00000243  89 07			MOV		[EDI], EAX			; store negative sign in first position
 00000245  83 C7 01			ADD		EDI, 1				; increment EDI to account for negative sign in first position
 00000248  58				POP		EAX

					; checks how many digits we'll need to store and adjusts EDI accordingly 
 00000249				_integerToASCII:
 00000249  83 F8 09			CMP		EAX, 9
 0000024C  7E 36			JLE		_oneDigit
 0000024E  83 F8 63			CMP		EAX, 99
 00000251  7E 36			JLE		_twoDigit
 00000253  3D 000003E7			CMP		EAX, 999
 00000258  7E 34			JLE		_threeDigit
 0000025A  3D 0000270F			CMP		EAX, 9999
 0000025F  7E 32			JLE		_fourDigit
 00000261  3D 0001869F			CMP		EAX, 99999
 00000266  7E 30			JLE		_fiveDigit
 00000268  3D 000F423F			CMP		EAX, 999999
 0000026D  7E 2E			JLE		_sixDigit
 0000026F  3D 0098967F			CMP		EAX, 9999999
 00000274  7E 2C			JLE		_sevenDigit
 00000276  3D 05F5E0FF			CMP		EAX, 99999999
 0000027B  7E 2A			JLE		_eightDigit
 0000027D  3D 3B9AC9FF			CMP		EAX, 999999999
 00000282  7E 28			JLE		_nineDigit

 00000284				_oneDigit:
 00000284  83 C7 01			ADD		EDI, 1
 00000287  EB 28			JMP		_asciiLoop

 00000289				_twoDigit:
 00000289  83 C7 02			ADD		EDI, 2
 0000028C  EB 23			JMP		_asciiLoop

 0000028E				_threeDigit:
 0000028E  83 C7 03			ADD		EDI, 3
 00000291  EB 1E			JMP		_asciiLoop

 00000293				_fourDigit:
 00000293  83 C7 04			ADD		EDI, 4
 00000296  EB 19			JMP		_asciiLoop

 00000298				_fiveDigit:
 00000298  83 C7 05			ADD		EDI, 5
 0000029B  EB 14			JMP		_asciiLoop

 0000029D				_sixDigit:
 0000029D  83 C7 06			ADD		EDI, 6
 000002A0  EB 0F			JMP		_asciiLoop

 000002A2				_sevenDigit:
 000002A2  83 C7 07			ADD		EDI, 7
 000002A5  EB 0A			JMP		_asciiLoop

 000002A7				_eightDigit:
 000002A7  83 C7 08			ADD		EDI, 8
 000002AA  EB 05			JMP		_asciiLoop

 000002AC				_nineDigit:
 000002AC  83 C7 09			ADD		EDI, 9
 000002AF  EB 00			JMP		_asciiLoop

					; loop starts with a null terminator then moves backward, storing ASCII bytes
 000002B1				_asciiLoop:
 000002B1  50				PUSH	EAX
 000002B2  FD				STD						; go backward through print buffer
 000002B3  B0 00			MOV		AL, 0
 000002B5  AA				STOSB
 000002B6  58				POP		EAX

 000002B7				_innerAsciiLoop:
 000002B7  99				CDQ	

 000002B8  BB 0000000A			MOV		EBX, 10
 000002BD  F7 FB			IDIV	EBX

					; calculate ASCII
 000002BF  50				PUSH	EAX
 000002C0  83 C2 30			ADD		EDX, 48
 000002C3  8A C2			MOV		AL, DL

 000002C5  AA				STOSB			
 000002C6  58				POP		EAX

					; exits when dividend is zero (i.e. when we're done converting)
 000002C7  83 F8 00			CMP		EAX, 0
 000002CA  74 02			JE		_exitASCII
 000002CC  EB E9			JMP		_innerAsciiLoop

 000002CE				_exitASCII:
					mDisplayString [EBP + 12]
 000002CE  52		     1		PUSH	EDX
 000002CF  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000002D2  E8 00000000 E     1		CALL	WriteString
 000002D7  5A		     1		POP		EDX

 000002D8  5D				POP		EBP
 000002D9  C2 0008			RET		8

 000002DC			WriteVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Description: Says goodbye and exits the program.
				;
				; Preconditions: None.
				;
				; Postconditions: None.
				;
				; Receives: String message goodbye.
				;
				; Returns: None.
				; ---------------------------------------------------------------------------------

 000002DC			farewell PROC
					
 000002DC  55				PUSH	EBP
 000002DD  8B EC			MOV		EBP, ESP

					mDisplayString [EBP + 8]
 000002DF  52		     1		PUSH	EDX
 000002E0  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000002E3  E8 00000000 E     1		CALL	WriteString
 000002E8  5A		     1		POP		EDX
 000002E9  E8 00000000 E		CALL	CrLf
					
					INVOKE	ExitProcess, 0
 000002EE  6A 00	   *	    push   +000000000h
 000002F0  E8 00000000 E   *	    call   ExitProcess

 000002F5			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/05/20 11:29:36
<Project 6 - String Primitives and Macros     (Proj6_JANT.as  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002EB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002F5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000190 _TEXT	Length= 00000095 Public STDCALL
  _input . . . . . . . . . . . .	L Near	 00000194 _TEXT	
  _posConvertLoop  . . . . . . .	L Near	 000001BE _TEXT	
  _numStore  . . . . . . . . . .	L Near	 000001DB _TEXT	
  _errorEntry  . . . . . . . . .	L Near	 000001E7 _TEXT	
  _plusSign  . . . . . . . . . .	L Near	 000001FD _TEXT	
  _negConvert  . . . . . . . . .	L Near	 00000204 _TEXT	
  _negConvertLoop  . . . . . . .	L Near	 0000020A _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000225 _TEXT	Length= 000000B7 Public STDCALL
  _integerToASCII  . . . . . . .	L Near	 00000249 _TEXT	
  _oneDigit  . . . . . . . . . .	L Near	 00000284 _TEXT	
  _twoDigit  . . . . . . . . . .	L Near	 00000289 _TEXT	
  _threeDigit  . . . . . . . . .	L Near	 0000028E _TEXT	
  _fourDigit . . . . . . . . . .	L Near	 00000293 _TEXT	
  _fiveDigit . . . . . . . . . .	L Near	 00000298 _TEXT	
  _sixDigit  . . . . . . . . . .	L Near	 0000029D _TEXT	
  _sevenDigit  . . . . . . . . .	L Near	 000002A2 _TEXT	
  _eightDigit  . . . . . . . . .	L Near	 000002A7 _TEXT	
  _nineDigit . . . . . . . . . .	L Near	 000002AC _TEXT	
  _asciiLoop . . . . . . . . . .	L Near	 000002B1 _TEXT	
  _innerAsciiLoop  . . . . . . .	L Near	 000002B7 _TEXT	
  _exitASCII . . . . . . . . . .	L Near	 000002CE _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000002DC _TEXT	Length= 00000019 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000143 _TEXT	Length= 0000004D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000143 Public STDCALL
  _inputLoop . . . . . . . . . .	L Near	 00000023 _TEXT	
  _displayLoop . . . . . . . . .	L Near	 00000072 _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 000000CB _TEXT	
  _noRound . . . . . . . . . . .	L Near	 0000010F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXLENGTH  . . . . . . . . . . .	Number	 0000002Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000251 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
messageAverage . . . . . . . . .	Byte	 00000218 _DATA	
messageComma . . . . . . . . . .	Byte	 0000024F _DATA	
messageError . . . . . . . . . .	Byte	 00000162 _DATA	
messageInput . . . . . . . . . .	Byte	 00000142 _DATA	
messageIntegers  . . . . . . . .	Byte	 000001CB _DATA	
messageSpace . . . . . . . . . .	Byte	 0000024D _DATA	
messageSum . . . . . . . . . . .	Byte	 000001EF _DATA	
printTemp  . . . . . . . . . . .	Byte	 000002AF _DATA	
programBy  . . . . . . . . . . .	Byte	 00000041 _DATA	
programInstructions1 . . . . . .	Byte	 00000059 _DATA	
programInstructions2 . . . . . .	Byte	 00000082 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInputTempLength  . . . . . .	DWord	 000002A7 _DATA	
userInputTemp  . . . . . . . . .	Byte	 0000027A _DATA	
userNumArray . . . . . . . . . .	DWord	 000002C3 _DATA	
userNumAverage . . . . . . . . .	DWord	 000002BF _DATA	
userNumSum . . . . . . . . . . .	DWord	 000002BB _DATA	
userVal  . . . . . . . . . . . .	DWord	 000002AB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
